// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// MOVIE SCHEMA
model Movie {
    id                  Int         @id
    media_type          String      @default("movie")
    imdb_id             String?
    genres              String[]
    original_language   String
    original_title      String
    overview            String?
    popularity          Float
    backdrop_path       String?
    poster_path         String?
    release_date        String?
    runtime             Int?
    spoken_languages    String[]
    status              String
    tagline             String?
    title               String
    added               AddedMovie[]
    watched             WatchedMovie[]
}

// TV SHOW SCHEMA
model Show {
    id                  Int         @id
    seasons             Season[]
    episodes            Episode[]
    media_type          String      @default("show")
    genres              String[]
    original_language   String
    overview            String?
    popularity          Float
    backdrop_path       String?
    poster_path         String?
    first_air_date      String
    last_air_date       String
    spoken_languages    String[]
    status              String
    tagline             String?
    title               String      @default("")
    networks            String[]
    number_of_episodes  Int
    number_of_seasons   Int
    added               AddedShow[]
    watched_episodes    WatchedEpisode[]
}

// TV SHOW SEASON SCHEMA
model Season {
    id                  Int         @id
    show                Show        @relation(fields: [show_id], references: [id])
    show_id             Int
    episodes            Episode[]
    media_type          String      @default("season")
    overview            String?
    poster_path         String?
    air_date            String?
    title               String      @default("")
    season_number       Int
    watched_episodes    WatchedEpisode[]
}

// TV SHOW EPISODE SCHEMA
model Episode {
    id                  Int         @id
    season              Season      @relation(fields: [season_id], references: [id])
    season_id           Int
    show                Show?       @relation(fields: [show_id], references: [id])
    show_id             Int?   
    media_type          String      @default("episode")
    overview            String?
    still_path          String?
    air_date            String?
    title               String      @default("")
    episode_number      Int
    watched             WatchedEpisode[]
}

// USER ADDED MOVIE SCHEMA
model AddedMovie {
    id              String  @id
    user            User    @relation(fields: [user_id], references: [id])
    user_id         String     
    movie           Movie   @relation(fields: [movie_id], references: [id])
    movie_id        Int
    timestamp       DateTime  @default(now())
}

// USER ADDED SHOW SCHEMA
model AddedShow {
    id              String  @id
    user            User    @relation(fields: [user_id], references: [id])
    user_id         String     
    show            Show   @relation(fields: [show_id], references: [id])
    show_id         Int
    timestamp       DateTime  @default(now())
}

// WATCHED MOVIE SCHEMA
model WatchedMovie {
    id              String  @id
    user            User    @relation(fields: [user_id], references: [id])
    user_id         String     
    movie           Movie   @relation(fields: [movie_id], references: [id])
    movie_id        Int
    timestamp       DateTime  @default(now())
}

// WATCHED EPISODE SCHEMA
model WatchedEpisode {
    id              String  @id
    user            User    @relation(fields: [user_id], references: [id])
    user_id         String     
    episode         Episode @relation(fields: [episode_id], references: [id])
    episode_id      Int
    season          Season  @relation(fields: [season_id], references: [id])
    season_id       Int
    show            Show?  @relation(fields: [show_id], references: [id])
    show_id         Int?   
    timestamp       DateTime  @default(now())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                    String    @id @default(cuid())
    name                  String?
    email                 String?   @unique
    emailVerified         DateTime?
    image                 String?
    accounts              Account[]
    sessions              Session[]
    added_movies          AddedMovie[]
    added_shows           AddedShow[]
    watched_movies        WatchedMovie[]
    watched_episodes      WatchedEpisode[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
